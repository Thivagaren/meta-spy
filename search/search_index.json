{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about-project","title":"About project","text":"<p>The project, known as \"Meta Spy,\" is a powerful and versatile tool designed to gather information from Facebook profiles, pages and search results. </p> <p>The project is under constant development to improve its functionality and address any issues that may arise.</p> <p>One notable limitation of the tool is that some scrapers may not work correctly for profiles with default account IDs in the URL, such as \"https://www.facebook.com/profile.php?id=100063142210972.\" These scrapers include work and education history, contact data, visited places, family members, recent places, reviews, and likes. However, this issue does not occur for profiles with custom IDs in the URL, like \"https://www.facebook.com/zuck.\".</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Login - Perform a secure two-step verification process to log in to Facebook account with enhanced security settings or log in to Facebook account using the default login method.</li> <li>Scrape details like: friend list, images, recent places, videos, reels, reviews, posts, likes, groups, events etc.</li> <li>Local web application - User is able to run a loval web application to browse scraped data, create notes for specified Person object and easly search details in web.</li> <li>Video downloader - download all scraped videos from facebook account or just by add passed url.</li> <li>Create a graphical representation of connections between different Facebook profiles based on their friendships.</li> <li>Utilize a free open-source language model to generate a concise summary of a Facebook user's infromation based on the scraped data.</li> <li>Initiate a friend crawler for a specified Facebook account. Gether data about friends and contunue the process for subsequent users in the queue.</li> <li>Save scraped data for a specified Facebook user to PDF file for documentation and anylysis.</li> <li>Running scrapers in parallel to speed up the data collection process</li> <li>Save all scraped data to JSON files and database </li> </ul>"},{"location":"changelogs/","title":"Change log","text":""},{"location":"changelogs/#current-version-14","title":"Current version: 1.4","text":""},{"location":"changelogs/#version-history","title":"Version history","text":""},{"location":"changelogs/#14","title":"1.4","text":"<ul> <li>Download scraped images from instagram profile</li> <li>Save url of an image to database instead of path of downloaded file</li> <li>Display Instagram account and scraped data in web application</li> <li>Improve commands to make them easier</li> </ul> <pre><code>python main.py fb-search &lt;\"Search Query\"&gt; &lt;results&gt; &lt;option_1&gt; &lt;option_2&gt; ... \n\nOptions:\n--post # Search for posts based on given query\n--results # Number of results \n--people # Search for people based on given query\n--group # Search for group based on given query\n--place # Search for place based on given query\n--event # Search for event based on given query\n--page # Search for page based on given query\n</code></pre> <pre><code>python main.py fb-account &lt;facebook_id&gt; &lt;option_1&gt; &lt;option_2&gt; ...\n\nOptions:\n--work # Scrape work and education information from the given facebook account\n--contact # Scrape contact data from the given facebook account\n--location # Scrape location data from the given facebook account\n--family # Scrape family members data from the given facebook account\n--name # Scrape full name from the given facebook account\n--friends # Scrape friends list from the given facebook account \ud83d\uded1 Page not support\n--images # Scrape images from the given facebook account \n--recent # Scrape recent places from the given facebook account \ud83d\uded1 Page not support\n--reels # Scrape urls for reels from the given facebook account\n--reviews # Scrape reviews from the given facebook account\n--videos # Scrape urls for videos from the given facebook account\n--da # Download all videos from the given facebook account\n--dn # Download only new videos from the given facebook account\n--posts # Scrape all posts from the given facebook account\n--details # Scrape details of posts from the given facebook account\n--likes # Scrape likes from the given facebook account\n--groups # Scrape groups from the given facebook account\n--events # Scrape events from the given facebook account\n</code></pre> <pre><code>python  main.py insta-account &lt;id&gt; &lt;option_1&gt; &lt;option_2&gt; ...\n\nOptions:\n--images\n--stats\n\n</code></pre>"},{"location":"changelogs/#13","title":"1.3","text":"<ul> <li>Change the name of a project to \"Meta Spy\"</li> <li>Scraping images from instagram profiles</li> <li>Save scraped images to the database and display on local server </li> <li>Delete AI features </li> </ul> <pre><code>python  main.py instagram-profile-images &lt;instagram_id&gt;\n</code></pre>"},{"location":"changelogs/#12","title":"1.2","text":"<ul> <li>Real time result while scrolling in scrapers:<ul> <li>Post url</li> <li>Images </li> <li>Friend list </li> </ul> </li> <li>Automatically save scraped data to JSON file <ul> <li>data available in this directory /facebookspy/scraped_data/</li> </ul> </li> <li>Running scrapers parallely while using commands:<ul> <li>python main.py python main.py scrape-basic-data <ul> <li>Automatically run all selected scrapers at the same time </li> </ul> <li>python main.py full-scrape  <ul> <li>If 2 or more usernames are provided it's gonna scrape all users at the same time </li> <li>But if only 1 username is provided it's gonna run all selected scrapers at the same time </li> </ul> <li>NEW command - SEARCH<ul> <li>This command allows to search for: places, pages, groups, person, events and posts</li> <li>This command also has a parallel feature</li> </ul> </li> <pre><code>python main.py search &lt; \" Search Query Here \" &gt; &lt; number_of_results &gt;\n</code></pre>"},{"location":"changelogs/#11","title":"1.1","text":"<ul> <li>Improve local web application <ul> <li>Delete React application</li> <li>Add templates for fastAPI </li> <li>Display all information about specified Person on a single page</li> <li>Delete docker and docker-compose files </li> </ul> </li> <li>Fix scraping URLS of a posts from user's profile </li> <li>Improve scraping details of a post <ul> <li>Number of likes</li> <li>Content (text)</li> <li>Image urls</li> <li>Author</li> <li>Post url </li> </ul> </li> <li>Improve typehints</li> <li>Add new selector for scraping videos from user's profile</li> </ul>"},{"location":"changelogs/#new-commands","title":"New commands:","text":"<pre><code>python main.py scrape-person-post-details &lt;facebook_id&gt;\n</code></pre>"},{"location":"changelogs/#10","title":"1.0","text":"<ul> <li>Delete command to run web application without docker </li> <li>Post classification using transformers to check if post content is possitive or negative and save those data to database</li> </ul> <pre><code>python post-classifier &lt;option&gt;\n\nOptions:\n--all-posts // Run post classification for all posts from the database\n--id // Run post classification for specified post from the database\n--person-id // Run post classification for a specified person from the database\n</code></pre> <ul> <li>Add missing typehints </li> <li>Change the structure of a project </li> <li>Friend crawler (This command works similarly to the command that scrapes data about a given user's friends list. The difference, however, is that after scraping and creating Friend objects, it also creates objects for the CrawlerQueue model and after successfully scraping friends for one user, it proceeds to scraping the list of friends for the next user in the queue.)</li> </ul>"},{"location":"changelogs/#run-crawler","title":"Run crawler","text":"<p>Start crawler for specified facebook account </p> <pre><code>python main.py friend-crawler &lt;facebook_id&gt;\n</code></pre>"},{"location":"changelogs/#display-queue","title":"Display queue","text":"<p>Display all objects available in the queue</p> <pre><code>python main.py display-queue\n</code></pre>"},{"location":"changelogs/#delete-queue-object","title":"Delete queue object","text":"<p>Delete specified queue object </p> <pre><code>python main.py delete-queue-object &lt;id&gt;\n</code></pre>"},{"location":"changelogs/#clear-queue","title":"Clear queue","text":"<p>Delete all objects from the queue </p> <pre><code>python main.py clear-queue\n</code></pre> <ul> <li>Option to scrape multiply users in full-scrape command </li> </ul> <pre><code>python main.py full-scrape &lt;facebook_id&gt; &lt;facebook_id&gt; &lt;facebook_id&gt;\n\n\n</code></pre>"},{"location":"changelogs/#09","title":"0.9","text":"<ul> <li>Add repository functions to return all data for specified Person object</li> <li>Implement LangChain and free Open Source LLM model to create summary for specified Person object based on scraped data</li> <li>Add command to create summary</li> <li>Add command to save all scraped data and summary to PDF file for specified Person object</li> <li>Fix saving events and groups if there is no data</li> <li>Disable displaying logs from Selenium in the console </li> <li>Add command to create graph of the connections between Person objects based on their friends </li> </ul>"},{"location":"changelogs/#new-commands_1","title":"New commands","text":"<p>To create a graph of connections between Person objects based on their Friends use this command</p> <pre><code>python main.py graph \n</code></pre> <p></p> <p>Save scraped data for specified Person object to PDF file </p> <pre><code>python main.py report &lt;facebook_id&gt; \n</code></pre> <p>Use free open source LLM model to create a short summary for specified Person object based on scraped data </p> <pre><code>python main.py summary &lt;facebook_id&gt;\n</code></pre>"},{"location":"changelogs/#v08","title":"V0.8","text":"<ul> <li>Scrape user's groups</li> <li>Scrape user's likes</li> <li>Scrape user's Events</li> <li>Optimalized scrolling </li> <li>Add number_of_friend field in Person model</li> <li>Pytest for all FastAPI endpoints and models </li> <li>Add email and phone_number field to Person model </li> <li>Fix saving full_name field to Person model</li> <li>Add scraper for Contact data</li> <li>Refactor scrapers to make them simpler</li> <li>Create a few commands (more details in commands page) with a drop down list to select which scrapers use</li> </ul>"},{"location":"changelogs/#v07","title":"V0.7","text":"<ul> <li>Scrape facebook posts urls from a facebook account</li> <li>Scrape post details (number of likes;comments;shares, content etc.)</li> <li>Add information about saving data to database</li> <li>FastAPI endpoint to return a list of posts for a give Person object</li> <li>React page to display a list of posts for a given Person object</li> <li>Refactor commands </li> <li>Display time that was taken to finish pipeline</li> <li>Update 'server' command to run FastAPI + React app with or without Docker</li> </ul> <pre><code>python main.py server --d \npython main.py server \n</code></pre> <ul> <li>Add shell script to run React application with Python</li> <li>Add Docs website which you are using now </li> </ul>"},{"location":"commands/","title":"Facebook commands","text":""},{"location":"commands/#info","title":"Info!","text":"<p>For user's with default account id in url (https://www.facebook.com/profile.php?id=100063142210972) some of the scrapers may not work  - work and education - contact data - visited place - family member  - recent places - reviews - likes </p> <p>This issue doesn't occur while facebook account has a custom id in url (https://www.facebook.com/zuck)</p> <p>I am working on to fix this issue. </p>"},{"location":"commands/#log-in","title":"Log in","text":""},{"location":"commands/#2-step-verification","title":"2-step verification","text":"<pre><code>python main.py login-2-step\n</code></pre>"},{"location":"commands/#default-log-in","title":"Default log in","text":"<pre><code>python main.py login\n</code></pre>"},{"location":"commands/#account-page-scrapers","title":"Account &amp; Page scrapers","text":"<ul> <li>By default this commands were created to scrape accounts but many of them also works for pages </li> <li>If some option doesn't work for a PAGE there is a note like this \"\ud83d\uded1 Page not support\"</li> </ul>"},{"location":"commands/#fb-account","title":"fb-account","text":"<pre><code>python main.py fb-account &lt;facebook_id&gt; &lt;option_1&gt; &lt;option_2&gt; ...\n\nOptions:\n--work # Scrape work and education information from the given facebook account\n--contact # Scrape contact data from the given facebook account\n--location # Scrape location data from the given facebook account\n--family # Scrape family members data from the given facebook account\n--name # Scrape full name from the given facebook account\n--friends # Scrape friends list from the given facebook account \ud83d\uded1 Page not support\n--images # Scrape images from the given facebook account \n--recent # Scrape recent places from the given facebook account \ud83d\uded1 Page not support\n--reels # Scrape urls for reels from the given facebook account\n--reviews # Scrape reviews from the given facebook account\n--videos # Scrape urls for videos from the given facebook account\n--da # Download all videos from the given facebook account\n--dn # Download only new videos from the given facebook account\n--posts # Scrape all posts from the given facebook account\n--details # Scrape details of posts from the given facebook account\n--likes # Scrape likes from the given facebook account\n--groups # Scrape groups from the given facebook account\n--events # Scrape events from the given facebook account\n</code></pre>"},{"location":"commands/#for-example","title":"For example","text":"<pre><code>python main.py zuck --work --contact --family --friends\n</code></pre>"},{"location":"commands/#posts","title":"Posts","text":""},{"location":"commands/#post-details","title":"post-details","text":"<p>Scrape post details based on post URL  - In database Posts scraped based on a given URL are in relation with object Person with ID - \"Anonymous\"</p> <pre><code>python main.py post-details \"&lt;post_url&gt;\"\n</code></pre> <p>I recommend to paste post url inside \" \" to avoid errors </p>"},{"location":"commands/#local-web-application","title":"Local Web Application","text":""},{"location":"commands/#run-fastapi-application","title":"Run FastAPI application","text":"<p>App is available under this local url - http://localhost:8000/</p> <pre><code>python main.py server\n</code></pre>"},{"location":"commands/#video-downloader","title":"Video downloader","text":"<p>Download single video from facebook </p> <pre><code>python main.py download-video &lt;facebook_video_url&gt;\n</code></pre>"},{"location":"commands/#analitics","title":"Analitics","text":""},{"location":"commands/#graph","title":"Graph","text":"<p>To create a graph of connections between Person objects based on their Friends use this command</p> <pre><code>python main.py graph \n</code></pre> <p></p>"},{"location":"commands/#friend-crawler","title":"Friend Crawler","text":"<p>This command works similarly to the command that scrapes data about a given user's friends list. The difference, however, is that after scraping and creating Friend objects, it also creates objects for the CrawlerQueue model and after successfully scraping friends for one user, it proceeds to scraping the list of friends for the next user in the queue.</p> <p></p>"},{"location":"commands/#run-crawler","title":"Run crawler","text":"<p>Start crawler for specified facebook account </p> <pre><code>python main.py friend-crawler &lt;facebook_id&gt;\n</code></pre>"},{"location":"commands/#display-queue","title":"Display queue","text":"<p>Display all objects available in the queue</p> <pre><code>python main.py display-queue\n</code></pre>"},{"location":"commands/#delete-queue-object","title":"Delete queue object","text":"<p>Delete specified queue object </p> <pre><code>python main.py delete-queue-object &lt;id&gt;\n</code></pre>"},{"location":"commands/#clear-queue","title":"Clear queue","text":"<p>Delete all objects from the queue </p> <pre><code>python main.py clear-queue\n</code></pre>"},{"location":"commands/#search","title":"Search","text":"<p>This command allows to search for: places, pages, person, groups, events, posts </p> <pre><code>python main.py fb-search &lt;\"Search Query\"&gt; &lt;results&gt; &lt;option_1&gt; &lt;option_2&gt; ... \n\nOptions:\n--post # Search for posts based on given query\n--results # Number of results \n--people # Search for people based on given query\n--group # Search for group based on given query\n--place # Search for place based on given query\n--event # Search for event based on given query\n--page # Search for page based on given query\n</code></pre> <ul> <li>Search query should be in double \" \"</li> <li>Number of results MUST be an integer </li> </ul> <p>After running this command you can select which data you would like to scrape  Result's will be saved in this directory /facebookspy/scraped_data/</p>"},{"location":"commands/#example","title":"Example","text":"<pre><code>python main.py fb-search \"Poland\" 20 --post --place --event\n</code></pre>"},{"location":"commands2/","title":"Instagram commands","text":""},{"location":"commands2/#info","title":"Info!","text":"<p>Before you will continue check the installation guide.</p>"},{"location":"commands2/#account-scraper","title":"Account scraper","text":""},{"location":"commands2/#insta-account","title":"insta-account","text":"<pre><code>python  main.py insta-account &lt;id&gt; &lt;option_1&gt; &lt;option_2&gt; ...\n\nOptions:\n--images\n--stats\n\n</code></pre>"},{"location":"commands2/#example","title":"Example","text":"<pre><code>python main.py insta-account zuck --images --stats \n</code></pre>"},{"location":"generalcommands/","title":"General commands","text":""},{"location":"generalcommands/#version","title":"Version","text":"<p>Display current version of the project</p> <pre><code>python main.py version\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#download-repository-using-git","title":"Download repository using git","text":"<pre><code>git clone https://github.com/DEENUU1/metaspy.git\n</code></pre>"},{"location":"installation/#configuration","title":"Configuration","text":"<p>Create dotenv file and add required data</p> <pre><code>cp .env_example .env \n</code></pre> <p>Install all requirements</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>Change directory to metaspy to run commands</p> <pre><code>cd metaspy\n</code></pre> <p>Check general commands</p> <p>Check available commands for Facebook </p> <p>Check available commands for Instagram</p>"},{"location":"installation/#instagram-configuration","title":"Instagram configuration","text":"<p>To use Instagram scraper go to the .env file and add your sessionid  To get your sessionid: 1. Go to your browser where you are already logged in to you account  2. Press F12 and  3. Go to the \"Data\"  4. In the sidebar on your left there is a label \"Cookies\" and choose cookies for Instagram. 5. Then find sessionid and copy the value. </p> <p></p>"},{"location":"installation/#tests","title":"Tests","text":"<pre><code># To run pytest use this command\npytest \n</code></pre>"}]}